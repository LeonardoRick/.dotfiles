#!/usr/bin/env bash
source ~/.logging

##############################################################
# callable functions (zsh only)
##############################################################

# format and displaya JWT token as JSON
function jwtd(){
  if [ -z "$1" ]; then
    echo "Usage: jwtd <jwt_token>"
    return 1
  fi
  jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "$1"
}

function text() {
  if [ $# -eq 0 ]; then
    open -a TextEdit
  else
    open -a TextEdit "$@"
  fi
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# shortcut to open VSCode on a new window
function coden() {
  code -n "$@"
}

# kill process on specified port
function killport() {
  if ! [[ $1 =~ ^[0-9]+$ ]] || [ $1 -lt 1 ] || [ $1 -gt 65535 ]; then
    log.error "Invalid port number: $1. Port number must be an integer between 1 and 65535."
    return 1
  fi

  pids=$(lsof -ti tcp:$1)
  pidsPrint="${pids//$'\n'/, }" #processes with no line breaks

  if [ -n "$pids" ]; then
    # https://stackoverflow.com/a/35927896/10526869
    while read -r pid; do
      kill $pid
    done <<< "$pids"
    log.success "Process(es) $pidsPrint on port $1 killed"
  else
    log.info "No processes found on port $1"
  fi
}

function getappid() {
    osascript -e "id of app \"$1\""
}
##############################################################
# Background functions
##############################################################

function setup_nvm(){
  export NVM_DIR="$HOME/.nvm"

#    Check if NVM is installed through Homebrew, and source nvm.sh accordingly
  if [ -d $(brew --prefix nvm 2>/dev/null) ]; then
    source $(brew --prefix nvm)/nvm.sh
  elif [ -f "$NVM_DIR/nvm.sh" ]; then
    source "$NVM_DIR/nvm.sh"
  fi

#   # NVM configuration outside homebrew (cloning repo)
#   [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
#   [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion


  # Check for .nvmrc file and NVM_DIR existence
  if [ -f .nvmrc ] && [ -d "$NVM_DIR" ]; then
    NODE_VERSION=$(cat .nvmrc)
    # Attempt to use the desired Node.js version; if not installed, install and use it
    nvm use "$NODE_VERSION" || nvm install "$NODE_VERSION"
  else
    nvm use --lts >/dev/null 2>&1 || nvm install --lts
  fi
}

function setup_pyenv() {
  export PYENV_ROOT="$HOME/.pyenv"
  command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
}

# copy last terminal output from (from last command) to clipboard.
# Be careful because it re-runs the command.
# CPLO: Copy Last Output
function cplo() {
  # Run the last command, capture its output, and send it to pbcopy
  eval "$(fc -ln -1)" | tr -d '\n' | pbcopy
}
